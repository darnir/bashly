#!/usr/bin/env bash
log__basic () 
{ 
    typeset argument;
    for argument in "$@";
    do
        printf '%s: %s\n' "${BASH_SOURCE##*/}" "$argument";
    done
}
log__debug () 
{ 
    typeset debug_level log_level;
    shift 2;
    if ((log_level >= debug_level)); then
        log__with_type DEBUG "$@";
    fi
}
log__error () 
{ 
    log__with_type ERROR "$@"
}
log__info () 
{ 
    log__with_type INFO "$@"
}
log__warning () 
{ 
    log__with_type WARNING "$@"
}
log__with_type () 
{ 
    typeset type=$1 argument;
    shift;
    for argument in "$@";
    do
        log__basic "$type: $argument" 1>&2;
    done
}

common__die () 
{ 
    typeset exit_status=$2;
    log__error "$1";
    exit "${exit_status:-1}"
}

bytes__chr () 
{ 
    typeset dec=$1;
    ((0 <= dec && dec < 256)) || return 1;
    printf \\$((dec/64*100+dec%64/8*10+dec%8))
}
bytes__hex () 
{ 
    LC_CTYPE=C printf '%x' "'$1"
}
bytes__ord () 
{ 
    LC_CTYPE=C printf '%d' "'$1"
}
bytes__unhex () 
{ 
    [[ $1 = ?([[:xdigit:]])[[:xdigit:]] ]] || return 1;
    printf '\x'"$1"
}
bytes__write_uint32_be () 
{ 
    typeset number=$1;
    typeset hex;
    ((number >> 32)) && return 1;
    printf -v hex '\\x%x' "$(( (number >> 24)  & 0xff))" "$(( (number >> 16)  & 0xff))" "$(( (number >>  8)  & 0xff))" "$((  number         & 0xff))";
    printf "$hex"
}
bytes__write_uint32_le () 
{ 
    typeset number=$1;
    typeset hex;
    ((number >> 32)) && return 1;
    printf -v hex '\\x%x' "$((  number         & 0xff))" "$(( (number >>  8)  & 0xff))" "$(( (number >> 16)  & 0xff))" "$(( (number >> 24)  & 0xff))";
    printf "$hex"
}

network__socket_get_device () 
{ 
    typeset type=$1 netloc=$2 port=$3;
    [[ $type = @(tcp|udp) ]] || return 1;
    [[ $netloc = @(*/*|____) ]] && return 1;
    [[ $port = +([[:digit:]]) ]] || return 1;
    printf %s "/dev/$type/$netloc/$port"
}
network__tcp-send () 
{ 
    typeset netloc=$1 port=$2;
    typeset line socket fd;
    socket=$(network__socket_get_device tcp "$netloc" "$port") || return 1;
    ( exec 3<> "$socket";
    while IFS= read -r line; do
        printf '%s\n' "$line";
    done 1>&3;
    printf %s "$line" 1>&3;
    while IFS= read -r line; do
        printf '%s\n' "$line";
    done 0<&3;
    printf %s "$line";
    exec 3>&- )
}

http__form_url_decode () 
{ 
    typeset data=${1//+/%20};
    http__percent_decode "$data"
}
http__form_url_encode () 
{ 
    : application/x-www-form-urlencoded;
    typeset data=$(http__percent_encode "$1");
    printf %s "${data//%20/+}"
}
http__get () 
{ 
    typeset url=$1;
    typeset scheme username password netloc port path query_string;
    typeset fragment resource IFS=:;
    typeset -a request=();
    IFS=: read -r scheme _ _ netloc port path query_string _ < <(http__url_parse "$url");
    resource=$path;
    [[ -n $query_string ]] && resource+=?$query_string;
    request+=("GET $resource HTTP/1.0");
    request+=("Host: $netloc");
    request+=('');
    printf '%s\r\n' "${request[@]}" | network__tcp_send "$netloc" "$port"
}
http__percent_decode () 
{ 
    typeset data=${1//\\/\\\\};
    printf "${data//%/\\x}"
}
http__percent_encode () 
{ 
    typeset character position data=$1;
    typeset -x LC_TYPE=C;
    for ((position=0; position<${#data}; position++))
    do
        character=${data:position:1};
        if [[ $character = [[:alnum:].~-] ]]; then
            printf %s "$character";
        else
            printf %%%02X "$(bytes__ord "$character")";
        fi;
    done
}
http__post () 
{ 
    typeset url=$1 form=$2;
    typeset scheme username password netloc port path query_string;
    typeset fragment resource IFS=:;
    typeset -a request=();
    read -r scheme _ _ netloc port path query_string _ < <(http__url_parse "$url");
    resource=$path;
    [[ -n $query_string ]] && resource+=?$query_string;
    request+=("POST $resource HTTP/1.0");
    request+=("Host: $netloc");
    request+=("Content-Type: application/x-www-form-urlencoded");
    request+=("Content-Length: $((${#form}+2))");
    request+=('');
    request+=("$form");
    printf '%s\r\n' "${request[@]}" | network__tcp_send "$netloc" "$port"
}
http__query_string_encode () 
{ 
    :  <<EOD
  Converts an associative array (or a pair of normal arrays) to a
  query string.

  The percent-encoding is a responsability of the caller.
  
  The arguments are expected to be in this order:
    k0 k1 k2 ... kN v0 v1 v2 ... vN
  where 'kI' is the key corresponding to the 'vI' value.
  

  # Sample call
  typeset -A params=(['foo']=bar ['bar']=baz)
  http__query_string_encode "${!params[@]}" "${params[@]}"
EOD

    typeset middle=$(($#/2))
    typeset argument separator;
    for ((argument = 1; argument <= middle; argument++))
    do
        printf %s%s=%s "$separator" "${@:argument:1}" "${@:argument+middle:1}";
        separator='&';
    done
}
http__url_parse () 
{ 
    :  <<EOD
  Parses a URL into its components.

  It returns a colon separated list of the retrieved elements in
  the following order:

  $scheme:$username:$password:$netloc:$port:$path:$query_string:$fragment

  http__url_parse 'http://u:p@www.domain.com:8080/path/to/file.ext?q=s#frag'
EOD

    typeset url=$1 default_scheme=$2
    typeset scheme username password netloc port path query_string;
    typeset fragment extglob=$(shopt extglob >/dev/null && printf y);
    typeset -a components;
    shopt -s extglob;
    : Parse the scheme, currently it is generic;
    if [[ $url = +([!:])?(s)://* ]]; then
        scheme=${url%%://*} url=${url#+([!:])://};
    else
        if [[ $url = @(//[!/]*|//) ]]; then
            scheme=$default_scheme url=${url#//};
        fi;
    fi;
    : Parse username:password combination in URL;
    if [[ $url = *([!@])@* ]]; then
        IFS=:@ read -r username password url <<< "$url";
    fi;
    : Parse network location '(ip address or domain name)';
    if [[ $url = +([!:]):+([[:digit:]])?([/?#&]*) ]]; then
        netloc=${url%%:*} port=${url#"$netloc"} port=${port##*:};
        url=${url#"$netloc:$port"};
    else
        if [[ $url = +([!/?#&])?([/?#&]*) ]]; then
            netloc=${url%%[/?#&]*};
            url=${url#"$netloc"};
            : Default ports;
            case $scheme in 
                http)
                    port=80
                ;;
                https)
                    port=443
                ;;
            esac;
        fi;
    fi;
    : Parse path;
    path=/;
    if [[ $url = +([!?#&])?([?#&]*) ]]; then
        path=${url%%[?#&]*};
        url=${url#"$path"};
    fi;
    : Parse query string;
    if [[ $url = +([!#])?([#]*) ]]; then
        query_string=${url%%[#]*} query_string=${query_string#'?'};
        url=${url#"?$query_string"};
    fi;
    : Parse fragment;
    if [[ $url = '#'* ]]; then
        fragment=${url#'#'};
    fi;
    : Return extglob to the state we found it;
    [[ -n $extglob ]] || shopt -u extglob;
    : Join the components;
    components=("$scheme" "$username" "$password" "$netloc" "$port" "$path" "$query_string" "$fragment");
    ( IFS=':';
    printf %s "${components[*]}" )
}

object__new () 
{ 
    typeset class_description=$1 input_properties=$2;
    typeset field;
    typeset name;
    typeset value;
    typeset class;
    typeset -a fields;
    typeset -A properties;
    IFS=';' read -ra fields <<< "$class_description";
    for field in "${fields[@]}";
    do
        [[ -n $field ]] || return 1;
        properties["$field"]=y;
    done;
    IFS=';' read -ra fields <<< "$input_properties";
    for field in "${fields[@]}";
    do
        IFS=':' read -rd '' name value <<< "$field";
        value=${value%'
'};
        [[ -n "${properties["$name"]+set}" ]] || { 
            printf -- '-%s:%s\0' "$name" "$value";
            return 2
        };
        printf '%s:%s\0' "$name" "$value";
    done
}

cmdline__arguments () 
{ 
    :  <<EOD
  cmdline__arguments 

  env vars:

  - errors_not_fatal
  - dashdash_not_special
EOD

    typeset key
    typeset value;
    typeset shift;
    typeset argument;
    typeset options;
    typeset stop_parsing;
    typeset return_code;
    IFS=: read -rd '' shift options < <(cmdline__p__parse_descriptions "$@") || return;
    shift "${shift:-0}";
    if [[ $1 = '--' ]]; then
        shift;
    else
        return 2;
    fi;
    cmdline__p__consume_arguments "$@"
}
cmdline__help () 
{ 
    :
}
cmdline__p__arguments__long () 
{ 
    typeset long;
    typeset name;
    typeset arguments;
    typeset i;
    typeset -a options;
    typeset -A arguments_table;
    typeset -A name_table;
    IFS=';' read -ra options <<< "$1";
    shift;
    for option in "${options[@]}";
    do
        IFS=':' read -r name _ long arguments <<< "$option";
        arguments_table["$long"]=$arguments;
        name_table["$long"]=$name;
    done;
    [[ $1 = --[!-]* ]] || return 1;
    [[ -n ${arguments_table["${1#--}"]+set} ]] || return 1;
    [[ -n ${name_table["${1#--}"]+set} ]] || return 1;
    arguments=${arguments_table["${1#--}"]};
    name=${name_table["${1#--}"]};
    shift;
    ((arguments <= $#)) || return 1;
    printf %s "$((arguments + 1))";
    if ((arguments > 0)); then
        for ((i = 1; i <= arguments; i++))
        do
            printf '%s:%s\0' "$name" "${!i}";
        done;
    else
        printf '%s\0' "$name";
    fi 1>&3
}
cmdline__p__arguments__short () 
{ 
    typeset short;
    typeset name;
    typeset arguments;
    typeset i;
    typeset -a options;
    typeset -A arguments_table;
    typeset -A name_table;
    IFS=';' read -ra options <<< "$1";
    shift;
    for option in "${options[@]}";
    do
        IFS=':' read -r name short _ arguments <<< "$option";
        arguments_table["$short"]=$arguments;
        name_table["$short"]=$name;
    done;
    [[ $1 = -[!-] ]] || return 1;
    [[ -n ${arguments_table["${1#-}"]+set} ]] || return 1;
    [[ -n ${name_table["${1#-}"]+set} ]] || return 1;
    arguments=${arguments_table["${1#-}"]};
    name=${name_table["${1#-}"]};
    shift;
    ((arguments <= $#)) || return 1;
    printf %s "$((arguments + 1))";
    if ((arguments > 0)); then
        for ((i = 1; i <= arguments; i++))
        do
            printf '%s:%s\0' "$name" "${!i}";
        done;
    else
        printf '%s\0' "$name";
    fi 1>&3
}
cmdline__p__arguments__short_composed () 
{ 
    typeset options_description=$1;
    typeset short;
    typeset rest;
    typeset arguments;
    typeset shift;
    typeset flag;
    typeset i;
    typeset -a options;
    typeset -a flags;
    typeset -a last_option;
    typeset -A arguments_table;
    IFS=';' read -ra options <<< "$options_description";
    shift;
    for option in "${options[@]}";
    do
        IFS=':' read -r name short _ arguments <<< "$option";
        arguments_table["$short"]=$arguments;
    done;
    rest=$1;
    shift;
    while [[ -n $rest ]]; do
        short=${rest#-} rest=${short#?} short=${short%"$rest"};
        [[ -n ${arguments_table["$short"]+set} ]] || return 1;
        arguments=${arguments_table["$short"]};
        if ((arguments == 0)); then
            flags+=("-$short");
        else
            if ((arguments > 0)) && [[ -n $rest ]]; then
                last_option=("-$short" "$rest" "$@") shift=$arguments;
                break;
            else
                if ((arguments > 0)); then
                    last_option=("-$short" "$@") shift=$((arguments + 1));
                    break;
                else
                    return 1;
                fi;
            fi;
        fi;
    done;
    if [[ -n $last_option ]]; then
        printf %s $shift;
    else
        printf %s 1;
    fi;
    for flag in "${flags[@]}";
    do
        cmdline__p__arguments__short "$options_description" "$flag" > /dev/null;
    done;
    cmdline__p__arguments__short "$options_description" "${last_option[@]}" > /dev/null
}
cmdline__p__consume_arguments () 
{ 
    typeset options=$1;
    shift;
    typeset argument;
    typeset stop_parsing;
    typeset helper;
    while (($# > 0)); do
        if [[ -n $stop_parsing ]]; then
            printf '@:%s\0' "$1";
            shift;
            continue;
        fi;
        helper=;
        case $1 in 
            -[!-])
                helper=cmdline__p__arguments__short
            ;;
            -[!-]*)
                helper=cmdline__p__arguments__short_composed
            ;;
            --[!-]*)
                if [[ $1 = --+([!=-])=* ]]; then
                    IFS='=' read -rd '' key value <<< "$1";
                    value=${value%'
'};
                    shift 1;
                    set -- "$key" "$value" "$@";
                fi;
                helper=cmdline__p__arguments__long
            ;;
            --)
                stop_parsing=y
            ;;
            *)
                printf '@:%s\0' "$1"
            ;;
        esac;
        if [[ -n $helper ]]; then
            { 
                shift=$("$helper" "$options" "$@") || return 1
            } 3>&1;
            shift "$((shift))";
        else
            shift;
        fi;
    done
}
cmdline__p__parse_descriptions () 
{ 
    typeset option_description;
    typeset option_object;
    typeset key;
    typeset value;
    typeset shift;
    typeset argument;
    typeset name;
    typeset short;
    typeset long;
    typeset -a option_descriptions;
    option_object='name;short;long;arguments;help';
    shift=0;
    for option_description in "$@";
    do
        [[ $option_description = '--' ]] && break;
        ((shift++));
        name= short= long= arguments=0;
        while IFS=: read -rd '' key value; do
            case $key in 
                -*)
                    return 1
                ;;
                name | short | long | arguments)
                    typeset "$key=$value"
                ;;
            esac;
        done < <(object__new "$option_object" "$option_description");
        option_descriptions+=("$name:$short:$long:$arguments");
    done;
    ( IFS=';';
    printf %s:%s "$shift" "${option_descriptions[*]}" )
}

main () 
{ 
    typeset -a commands arguments;
    typeset -a options=('name:encode;short:e;long:encode;arguments:1' 'name:decode;short:d;long:decode;arguments:1');
    while IFS=: read -rd '' type value; do
        case $type in 
            @)
                echo bad "$value";
                exit 1
            ;;
            -)
                echo bad "$value";
                exit 1
            ;;
            encode)
                command=http__form_url_encode argument=$value;
                break
            ;;
            decode)
                command=http__form_url_decode argument=$value;
                break
            ;;
        esac;
    done < <(cmdline__arguments "${options[@]}" -- "$@");
    "$command" "$argument"
}
main "$@"
