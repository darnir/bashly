#!/usr/bin/env bash
log.basic () 
{ 
    typeset argument;
    for argument in "$@";
    do
        printf '%s: %s\n' "${BASH_SOURCE##*/}" "$argument";
    done
}
log.debug () 
{ 
    typeset debug_level log_level;
    shift 2;
    if ((log_level >= debug_level)); then
        log.with-type DEBUG "$@";
    fi
}
log.error () 
{ 
    log.with-type ERROR "$@"
}
log.info () 
{ 
    log.with-type INFO "$@"
}
log.warning () 
{ 
    log.with-type WARNING "$@"
}
log.with-type () 
{ 
    typeset type=$1 argument;
    shift;
    for argument in "$@";
    do
        log.basic "$type: $argument" 1>&2;
    done
}

common.die () 
{ 
    typeset exit_status=$2;
    log.error "$1";
    exit "${exit_status:-1}"
}

bytes.chr () 
{ 
    typeset dec=$1;
    ((0 <= dec && dec < 256)) || return 1;
    printf \\$((dec/64*100+dec%64/8*10+dec%8))
}
bytes.hex () 
{ 
    LC_CTYPE=C printf '%x' "'$1"
}
bytes.ord () 
{ 
    LC_CTYPE=C printf '%d' "'$1"
}
bytes.unhex () 
{ 
    [[ $1 = ?([[:xdigit:]])[[:xdigit:]] ]] || return 1;
    printf '\x'"$1"
}
bytes.write-uint32-be () 
{ 
    typeset number=$1;
    typeset hex;
    ((number >> 32)) && return 1;
    printf -v hex '\\x%x' "$(( (number >> 24)  & 0xff))" "$(( (number >> 16)  & 0xff))" "$(( (number >>  8)  & 0xff))" "$((  number         & 0xff))";
    printf "$hex"
}
bytes.write-uint32-le () 
{ 
    typeset number=$1;
    typeset hex;
    ((number >> 32)) && return 1;
    printf -v hex '\\x%x' "$((  number         & 0xff))" "$(( (number >>  8)  & 0xff))" "$(( (number >> 16)  & 0xff))" "$(( (number >> 24)  & 0xff))";
    printf "$hex"
}

network.socket-get-device () 
{ 
    typeset type=$1 netloc=$2 port=$3;
    [[ $type = @(tcp|udp) ]] || return 1;
    [[ $netloc = @(*/*|..) ]] && return 1;
    [[ $port = +([[:digit:]]) ]] || return 1;
    printf %s "/dev/$type/$netloc/$port"
}
network.tcp-send () 
{ 
    typeset netloc=$1 port=$2;
    typeset line socket fd;
    socket=$(network.socket-get-device tcp "$netloc" "$port") || return 1;
    ( exec 3<> "$socket";
    while IFS= read -r line; do
        printf '%s\n' "$line";
    done 1>&3;
    printf %s "$line" 1>&3;
    while IFS= read -r line; do
        printf '%s\n' "$line";
    done 0<&3;
    printf %s "$line";
    exec 3>&- )
}

http.form-url-decode () 
{ 
    typeset data=${1//+/%20};
    http.percent-decode "$data"
}
http.form-url-encode () 
{ 
    : application/x-www-form-urlencoded;
    typeset data=$(http.percent-encode "$1");
    printf %s "${data//%20/+}"
}
http.get () 
{ 
    typeset url=$1;
    typeset scheme username password netloc port path query_string;
    typeset fragment resource IFS=:;
    typeset -a request=();
    IFS=: read -r scheme _ _ netloc port path query_string _ < <(http.url-parse "$url");
    resource=$path;
    [[ -n $query_string ]] && resource+=?$query_string;
    request+=("GET $resource HTTP/1.0");
    request+=("Host: $netloc");
    request+=('');
    printf '%s\r\n' "${request[@]}" | network.tcp-send "$netloc" "$port"
}
http.percent-decode () 
{ 
    typeset data=${1//\\/\\\\};
    printf "${data//%/\\x}"
}
http.percent-encode () 
{ 
    : RFC3986;
    typeset character position data=$1;
    typeset -x LC_TYPE=C;
    for ((position=0; position<${#data}; position++))
    do
        character=${data:position:1};
        if [[ $character = [[:alnum:].~-] ]]; then
            printf %s "$character";
        else
            printf %%%02X "$(bytes.ord "$character")";
        fi;
    done
}
http.post () 
{ 
    typeset url=$1 form=$2;
    typeset scheme username password netloc port path query_string;
    typeset fragment resource IFS=:;
    typeset -a request=();
    read -r scheme _ _ netloc port path query_string _ < <(http.url-parse "$url");
    resource=$path;
    [[ -n $query_string ]] && resource+=?$query_string;
    request+=("POST $resource HTTP/1.0");
    request+=("Host: $netloc");
    request+=("Content-Type: application/x-www-form-urlencoded");
    request+=("Content-Length: $((${#form}+2))");
    request+=('');
    request+=("$form");
    printf '%s\r\n' "${request[@]}" | network.tcp-send "$netloc" "$port"
}
http.query-string-encode () 
{ 
    :  <<EOD
  Converts an associative array (or a pair of normal arrays) to a
  query string.

  The percent-encoding is a responsability of the caller.
  
  The arguments are expected to be in this order:
    k0 k1 k2 ... kN v0 v1 v2 ... vN
  where 'kI' is the key corresponding to the 'vI' value.
  

  # Sample call
  typeset -A params=(['foo']=bar ['bar']=baz)
  http.query-string-encode "${!params[@]}" "${params[@]}"
EOD

    typeset middle=$(($#/2))
    typeset argument separator;
    for ((argument = 1; argument <= middle; argument++))
    do
        printf %s%s=%s "$separator" "${@:argument:1}" "${@:argument+middle:1}";
        separator='&';
    done
}
http.url-parse () 
{ 
    :  <<EOD
  Parses a URL into its components.

  It returns a colon separated list of the retrieved elements in
  the following order:

  $scheme:$username:$password:$netloc:$port:$path:$query_string:$fragment

  http.url-parse 'http://u:p@www.domain.com:8080/path/to/file.ext?q=s#frag'
EOD

    typeset url=$1 default_scheme=$2
    typeset scheme username password netloc port path query_string;
    typeset fragment extglob=$(shopt extglob >/dev/null && printf y);
    typeset -a components;
    shopt -s extglob;
    : Parse the scheme, currently it is generic;
    if [[ $url = +([!:])?(s)://* ]]; then
        scheme=${url%%://*} url=${url#+([!:])://};
    else
        if [[ $url = @(//[!/]*|//) ]]; then
            scheme=$default_scheme url=${url#//};
        fi;
    fi;
    : Parse username:password combination in URL;
    if [[ $url = *([!@])@* ]]; then
        IFS=:@ read -r username password url <<< "$url";
    fi;
    : Parse network location '(ip address or domain name)';
    if [[ $url = +([!:]):+([[:digit:]])?([/?#&]*) ]]; then
        netloc=${url%%:*} port=${url#"$netloc"} port=${port##*:};
        url=${url#"$netloc:$port"};
    else
        if [[ $url = +([!/?#&])?([/?#&]*) ]]; then
            netloc=${url%%[/?#&]*};
            url=${url#"$netloc"};
            : Default ports;
            case $scheme in 
                http)
                    port=80
                ;;
                https)
                    port=443
                ;;
            esac;
        fi;
    fi;
    : Parse path;
    path=/;
    if [[ $url = +([!?#&])?([?#&]*) ]]; then
        path=${url%%[?#&]*};
        url=${url#"$path"};
    fi;
    : Parse query string;
    if [[ $url = +([!#])?([#]*) ]]; then
        query_string=${url%%[#]*} query_string=${query_string#'?'};
        url=${url#"?$query_string"};
    fi;
    : Parse fragment;
    if [[ $url = '#'* ]]; then
        fragment=${url#'#'};
    fi;
    : Return extglob to the state we found it;
    [[ -n $extglob ]] || shopt -u extglob;
    : Join the components;
    components=("$scheme" "$username" "$password" "$netloc" "$port" "$path" "$query_string" "$fragment");
    ( IFS=':';
    printf %s "${components[*]}" )
}

cmdline.__arguments.long () 
{ 
    typeset argument=$1;
    typeset name i arguments;
    [[ -n $argument ]] || return 1;
    shift;
    { 
        typeset -p long_map || return 2;
        typeset -p arguments_map || return 2
    } > /dev/null 2>&1;
    name=${long_map["${argument#--}"]};
    [[ -n $name ]] || { 
        printf -- '- %s\0' "$argument" 1>&3;
        return 3
    };
    arguments=${arguments_map["$name"]};
    if ((arguments == 0)); then
        printf '%s\0' "$name" 1>&3;
        return 0;
    else
        if ((arguments > $#)); then
            return 4;
        fi;
    fi;
    for ((i = 1; i <= arguments; i++))
    do
        printf '%s %s\0' "$name" "${@:i:1}" 1>&3;
        shift;
    done;
    printf %s "$arguments"
}
cmdline.__arguments.short () 
{ 
    typeset argument=$1;
    typeset name i arguments;
    [[ -n $argument ]] || return 1;
    shift;
    { 
        typeset -p short_map || return 2;
        typeset -p arguments_map || return 2
    } > /dev/null 2>&1;
    name=${short_map["${argument#-}"]};
    [[ -n $name ]] || { 
        printf -- '- %s\0' "$argument" 1>&3;
        return 3
    };
    arguments=${arguments_map["$name"]};
    if ((arguments == 0)); then
        printf '%s\0' "$name" 1>&3;
        return 0;
    else
        if ((arguments > $#)); then
            return 4;
        fi;
    fi;
    for ((i = 1; i <= arguments; i++))
    do
        printf '%s %s\0' "$name" "${@:i:1}" 1>&3;
        shift;
    done;
    printf %s "$arguments"
}
cmdline.__arguments.short-composed () 
{ 
    typeset argument=$1;
    typeset option remainder name arguments;
    [[ -n $argument ]] || return 1;
    shift;
    { 
        typeset -p short_map || return 2;
        typeset -p arguments_map || return 2
    } > /dev/null 2>&1;
    option=${argument#-} option=${option::1};
    remainder=${argument#-?};
    name=${short_map["$option"]};
    [[ -n $name ]] || { 
        printf -- '- %s\0' "$argument" 1>&3;
        return 3
    };
    arguments=${arguments_map["$name"]};
    if ((arguments == 0)); then
        printf '%s\0' "$name" 1>&3;
        if [[ -n $remainder ]]; then
            cmdline.__arguments.short-composed "-$remainder" "$@" || return;
        fi;
    else
        [[ -n $remainder ]] && set -- "$remainder" "$@";
        cmdline.__arguments.short "-$option" "$@" || return;
    fi
}
cmdline.arguments () 
{ 
    :  <<EOD
  - name of argument
  - long form
  - short form
  - is required?
  - number of args
  - help string
  
  name=help:long=help:short=h:required=:arguments=0:help=show this help
  
  cmdline.arguments 

  env vars:

  - errors_not_fatal
  - dashdash_not_special
EOD

    typeset option_description parameters key value shift argument
    typeset long short required arguments stop_parsing return_code;
    typeset -a parameters;
    typeset -A long_map short_map required_map arguments_map;
    shift=0;
    for option_description in "$@";
    do
        [[ $option_description = '--' ]] && break;
        ((shift++));
        IFS=: read -ra parameters <<< "$option_description";
        name= long= short= required= arguments=0;
        for parameter in "${parameters[@]}";
        do
            IFS== read -r key value <<< "$parameter";
            case $key in 
                name)
                    name=$value
                ;;
                long)
                    long=$value
                ;;
                short)
                    short=$value
                ;;
                required)
                    required=$value
                ;;
                arguments)
                    arguments=$value
                ;;
            esac;
            name=${name:-"$long"};
            name=${name:-"$short"};
            [[ -n $name ]] || return 1;
            [[ -n $long ]] && long_map["$long"]=$name;
            [[ -n $short ]] && short_map["$short"]=$name;
            required_map["$name"]=$required;
            arguments_map["$name"]=$arguments;
        done;
    done;
    shift "$shift";
    if [[ $1 = '--' ]]; then
        shift;
    else
        return 2;
    fi;
    while (($# > 0)); do
        argument=$1;
        if [[ -n $stop_parsing ]]; then
            printf '@ %s\0' "$argument";
            shift;
            continue;
        fi;
        case $argument in 
            -[!-])
                { 
                    shift=$(cmdline.__arguments.short "$@") || { 
                        return_code=$?;
                        [[ -n $errors_not_fatal ]] || return "$return_code"
                    }
                } 3>&1;
                shift "$((shift + 1))"
            ;;
            -[!-]*)
                { 
                    shift=$(cmdline.__arguments.short-composed "$@") || { 
                        return_code=$?;
                        [[ -n $errors_not_fatal ]] || return "$return_code"
                    }
                } 3>&1;
                shift "$((shift + 1))"
            ;;
            --[!-]*)
                if [[ $argument = --+([!=])=* ]]; then
                    IFS== read -rd '' key value <<< "$argument";
                    shift;
                    set -- "$key" "${value%
}" "$@";
                fi;
                { 
                    shift=$(cmdline.__arguments.long "$@") || { 
                        return_code=$?;
                        [[ -n $errors_not_fatal ]] || return "$return_code"
                    }
                } 3>&1;
                shift "$((shift + 1))"
            ;;
            --)
                if [[ -n $dashdash_not_special ]]; then
                    printf '@ %s\0' "$argument";
                else
                    stop_parsing=y;
                fi;
                shift
            ;;
            *)
                printf '@ %s\0' "$argument";
                shift
            ;;
        esac;
    done
}
cmdline.help () 
{ 
    typeset option_description name long short required arguments help;
    typeset key value parameter;
    typeset -a parameters;
    for option_description in "$@";
    do
        [[ $option_description = '--' ]] && break;
        IFS=: read -ra parameters <<< "$option_description";
        name= long= short= required= arguments=0 help=;
        for parameter in "${parameters[@]}";
        do
            IFS== read -r key value <<< "$parameter";
            case $key in 
                name)
                    name=$value
                ;;
                long)
                    long=$value
                ;;
                short)
                    short=$value
                ;;
                required)
                    required=$value
                ;;
                arguments)
                    arguments=$value
                ;;
                help)
                    help=$value
                ;;
            esac;
            name=${name:-"$long"};
            name=${name:-"$short"};
            [[ -n $name ]] || return 1;
        done;
        if [[ -n $short && -n $long ]]; then
            printf '\t-%s, --%s\n\t\t%s\n' "$short" "$long" "$help";
        else
            if [[ -n $short ]]; then
                printf '\t-%s\n\t\t%s\n' "$short" "$help";
            else
                if [[ -n $long ]]; then
                    printf '\t--%s\n\t\t%s\n' "$long" "$help";
                else
                    :;
                fi;
            fi;
        fi;
    done
}

main () 
{ 
    typeset IFS;
    typeset -a commands arguments;
    typeset -a options=('name=encode:short=e:long=encode:arguments=1' 'name=decode:short=d:long=decode:arguments=1');
    while read -rd '' type value; do
        case $type in 
            @)
                echo bad "$value";
                exit 1
            ;;
            -)
                echo bad "$value";
                exit 1
            ;;
            encode)
                command=http.form-url-encode argument=$value;
                break
            ;;
            decode)
                command=http.form-url-decode argument=$value;
                break
            ;;
        esac;
    done < <(cmdline.arguments "${options[@]}" -- "$@");
    "$command" "$argument"
}
main "$@"
