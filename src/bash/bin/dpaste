#!/usr/bin/env bash
common.die () 
{ 
    typeset arg;
    for arg in "$@";
    do
        printf '%s: %s\n' "$BASH_SOURCE" "$arg" 1>&2;
    done;
    exit 1
}

bytes.chr () 
{ 
    typeset dec=$1;
    ((0 <= dec && dec < 256)) || return 1;
    printf \\$((dec/64*100+dec%64/8*10+dec%8))
}
bytes.ord () 
{ 
    LC_CTYPE=C printf '%d' "'$1"
}
bytes.write-uint32-be () 
{ 
    typeset number=$1;
    typeset hex;
    ((number >> 32)) && return 1;
    printf -v hex '\\x%x' "$(( (number >> 24)  & 0xff))" "$(( (number >> 16)  & 0xff))" "$(( (number >>  8)  & 0xff))" "$((  number         & 0xff))";
    printf "$hex"
}
bytes.write-uint32-le () 
{ 
    typeset number=$1;
    typeset hex;
    ((number >> 32)) && return 1;
    printf -v hex '\\x%x' "$((  number         & 0xff))" "$(( (number >>  8)  & 0xff))" "$(( (number >> 16)  & 0xff))" "$(( (number >> 24)  & 0xff))";
    printf "$hex"
}

network.socket-get-device () 
{ 
    typeset type=$1 netloc=$2 port=$3;
    [[ $type = @(tcp|udp) ]] || return 1;
    [[ $netloc = @(*/*|..) ]] && return 1;
    [[ $port = +([[:digit:]]) ]] || return 1;
    printf %s "/dev/$type/$netloc/$port"
}
network.tcp-send () 
{ 
    typeset netloc=$1 port=$2;
    typeset line socket fd;
    socket=$(network.socket-get-device tcp "$netloc" "$port") || return 1;
    ( exec 3<> "$socket";
    while IFS= read -r line; do
        printf '%s\n' "$line";
    done 1>&3;
    printf %s "$line" 1>&3;
    while IFS= read -r line; do
        printf '%s\n' "$line";
    done 0<&3;
    printf %s "$line";
    exec 3>&- )
}

http.form-url-decode () 
{ 
    typeset data=${1//+/%20};
    http.percent-decode "$data"
}
http.form-url-encode () 
{ 
    : application/x-www-form-urlencoded;
    typeset data=$(http.percent-encode "$1");
    printf %s "${data//%20/+}"
}
http.get () 
{ 
    typeset url=$1;
    typeset scheme username password netloc port path query_string;
    typeset fragment resource IFS=:;
    typeset -a request=();
    IFS=: read -r scheme _ _ netloc port path query_string _ < <(http.url-parse "$url");
    resource=$path;
    [[ -n $query_string ]] && resource+=?$query_string;
    request+=("GET $resource HTTP/1.0");
    request+=("Host: $netloc");
    request+=('');
    printf '%s\r\n' "${request[@]}" | network.tcp-send "$netloc" "$port"
}
http.percent-decode () 
{ 
    typeset data=${1//\\/\\\\};
    printf "${data//%/\\x}"
}
http.percent-encode () 
{ 
    : RFC3986;
    typeset character position data=$1;
    typeset -x LC_TYPE=C;
    for ((position=0; position<${#data}; position++))
    do
        character=${data:position:1};
        if [[ $character = [[:alpha:].~-] ]]; then
            printf %s "$character";
        else
            printf %%%02X "$(bytes.ord "$character")";
        fi;
    done
}
http.post () 
{ 
    typeset url=$1 form=$2;
    typeset scheme username password netloc port path query_string;
    typeset fragment resource IFS=:;
    typeset -a request=();
    read -r scheme _ _ netloc port path query_string _ < <(http.url-parse "$url");
    resource=$path;
    [[ -n $query_string ]] && resource+=?$query_string;
    request+=("POST $resource HTTP/1.0");
    request+=("Host: $netloc");
    request+=("Content-Type: application/x-www-form-urlencoded");
    request+=("Content-Length: $((${#form}+2))");
    request+=('');
    request+=("$form");
    printf '%s\r\n' "${request[@]}" | network.tcp-send "$netloc" "$port"
}
http.query-string-encode () 
{ 
    :  <<EOD
  Converts an associative array (or a pair of normal arrays) to a
  query string.

  The percent-encoding is a responsability of the caller.
  
  The arguments are expected to be in this order:
    k0 k1 k2 ... kN v0 v1 v2 ... vN
  where 'kI' is the key corresponding to the 'vI' value.
  

  # Sample call
  typeset -A params=(['foo']=bar ['bar']=baz)
  http.query-string-encode "${!params[@]}" "${params[@]}"
EOD

    typeset middle=$(($#/2))
    typeset argument separator;
    for ((argument = 1; argument <= middle; argument++))
    do
        printf %s%s=%s "$separator" "${@:argument:1}" "${@:argument+middle:1}";
        separator='&';
    done
}
http.url-parse () 
{ 
    :  <<EOD
  Parses a URL into its components.

  It returns a colon separated list of the retrieved elements in
  the following order:

  $scheme:$username:$password:$netloc:$port:$path:$query_string:$fragment

  http.url-parse 'http://u:p@www.domain.com:8080/path/to/file.ext?q=s#frag'
EOD

    typeset url=$1 default_scheme=$2
    typeset scheme username password netloc port path query_string;
    typeset fragment extglob=$(shopt extglob >/dev/null && printf y);
    typeset -a components;
    shopt -s extglob;
    : Parse the scheme, currently it is generic;
    if [[ $url = +([!:])?(s)://* ]]; then
        scheme=${url%%://*} url=${url#+([!:])://};
    else
        if [[ $url = @(//[!/]*|//) ]]; then
            scheme=$default_scheme url=${url#//};
        fi;
    fi;
    : Parse username:password combination in URL;
    if [[ $url = *([!@])@* ]]; then
        IFS=:@ read -r username password url <<< "$url";
    fi;
    : Parse network location '(ip address or domain name)';
    if [[ $url = +([!:]):+([[:digit:]])?([/?#&]*) ]]; then
        netloc=${url%%:*} port=${url#"$netloc"} port=${port##*:};
        url=${url#"$netloc:$port"};
    else
        if [[ $url = +([!/?#&])?([/?#&]*) ]]; then
            netloc=${url%%[/?#&]*};
            url=${url#"$netloc"};
            : Default ports;
            case $scheme in 
                http)
                    port=80
                ;;
                https)
                    port=443
                ;;
            esac;
        fi;
    fi;
    : Parse path;
    path=/;
    if [[ $url = +([!?#&])?([?#&]*) ]]; then
        path=${url%%[?#&]*};
        url=${url#"$path"};
    fi;
    : Parse query string;
    if [[ $url = +([!#])?([#]*) ]]; then
        query_string=${url%%[#]*} query_string=${query_string#'?'};
        url=${url#"?$query_string"};
    fi;
    : Parse fragment;
    if [[ $url = '#'* ]]; then
        fragment=${url#'#'};
    fi;
    : Return extglob to the state we found it;
    [[ -n $extglob ]] || shopt -u extglob;
    : Join the components;
    components=("$scheme" "$username" "$password" "$netloc" "$port" "$path" "$query_string" "$fragment");
    ( IFS=':';
    printf %s "${components[*]}" )
}

main () 
{ 
    typeset content=$(http.form-url-encode "$(cat "${1:-/dev/stdin}")");
    typeset query_string=$(http.query-string-encode content "$content");
    typeset key value;
    { 
        read;
        while IFS=' 	' read -r key value _; do
            if [[ $key = Location: ]]; then
                printf '%s\n' "$value";
                return 0;
            fi;
        done
    } < <(http.post 'http://dpaste.com/api/v1/' "$query_string");
    return 1
}
main "$@"
