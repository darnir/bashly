#!/bin/bash

:load common
:load bytes
:load net


# FIXME: Check against multibyte encodings!
function http.percent-encode {
  : RFC3986

  typeset character position data=$1 LC_TYPE=C

  for ((position=0; position<${#data}; position++)); do
    character=${data:position:1}

    if [[ $character = [[:alpha:].~-] ]]; then
      printf %s "$character"
    else
      printf %%%02X "$(bytes.ord "$character")"
    fi
  done
}


function http.form-url-encode {
  : application/x-www-form-urlencoded

  typeset data=$(http.percent-encode "$1")

  printf %s "${data//'%20'/'+'}"
}


function http.percent-decode {
  typeset data=${1//\\/\\\\}

  printf "${data//\%/\\x}"
}


function http.form-url-decode {
    typeset data=${1//'+'/'%20'}

    http.percent-decode "$data"
}


function http.query-string-encode {
  : <<EOD
  Converts an associative array (or a pair of normal arrays) to a
  query string.

  The percent-encoding is a responsability of the caller.
  
  The arguments are expected to be in this order:
    k0 k1 k2 ... kN v0 v1 v2 ... vN
  where 'kI' is the key corresponding to the 'vI' value.
  

  # Sample call
  declare -A params=(['foo']=bar ['bar']=baz)
  http.query-string-encode "${!params[@]}" "${params[@]}"
EOD


  typeset middle=$(($#/2))
  typeset argument separator

  for ((argument = 1; argument <= middle; argument++)); do
    printf %s%s=%s "$separator" "${@:argument:1}" \
                                "${@:argument+middle:1}"
    separator='&'
  done
}


function http.url-parse {
  : <<EOD
  Parses a URL into its components.

  It returns a colon separated list of the retrieved elements in
  the following order:

  $scheme:$username:$password:$netloc:$port:$path:$query_string:$fragment

  http.url-parse 'http://u:p@www.domain.com:8080/path/to/file.ext?q=s#frag'
EOD

  typeset url=$1 default_scheme=$2
  typeset scheme username password netloc port path query_string
  typeset fragment extglob=$(shopt extglob >/dev/null && printf y)
  typeset -a components 

  shopt -s extglob

  : Parse the scheme, currently it is generic
  if    [[ $url = +([!:])?(s)://* ]]; then
    scheme=${url%%://*} url=${url#+([!:])://}
  elif  [[ $url = @(//[!/]*|//) ]]; then
    scheme=$default_scheme url=${url#//}
  fi

  : Parse username:password combination in URL
  if [[ $url = *([!@])@* ]]; then
    IFS=:@ read -r username password url <<< "$url"
  fi

  : Parse network location '(ip address or domain name)'
  if [[ $url = +([!:]):+([[:digit:]])?([/?#&]*) ]]; then
    netloc=${url%%:*} port=${url#"$netloc"} port=${port##*:}
    url=${url#"$netloc:$port"}
  elif [[ $url = +([!/?#&])?([/?#&]*) ]]; then
    netloc=${url%%[/?#&]*}
    url=${url#"$netloc"}

    : Default ports
    case $scheme in
      http) port=80;;
     https) port=443;;
    esac
  fi

  : Parse path
  path=/
  if [[ $url = +([!?#&])?([?#&]*) ]]; then
    path=${url%%[?#&]*}
    url=${url#"$path"}
  fi

  : Parse query string
  if [[ $url = +([!#])?([#]*) ]]; then
    query_string=${url%%[#]*} query_string=${query_string#'?'}
    url=${url#"?$query_string"}
  fi

  : Parse fragment
  if [[ $url = '#'* ]]; then
    fragment=${url#'#'}
  fi

  : Return extglob to the state we found it
  [[ $extglob ]] || shopt -u extglob

  : Join the components
  components=(
    "$scheme" "$username" "$password"
    "$netloc" "$port" "$path"
    "$query_string" "$fragment"
  )

  (IFS=':'; printf %s "${components[*]}")
}


function http.get {
  typeset url=$1
  typeset netloc port path query_string fragment resource
  typeset -a request=()

  IFS=: read -r scheme _ _ netloc port path query_string _ \
    < <(http.url-parse "$url")

  resource=$path

  [[ $query_string ]] && resource+=?$query_string

  request+=("GET $resource HTTP/1.0")
  request+=("Host: $netloc")
  request+=('')

  printf '%s\r\n' "${request[@]}" | net.tcp-send "$netloc" "$port"
}

# FIXME: check against header injection (i.e. $resource)
function http.post {
  typeset url=$1 form=$2
  typeset netloc port path query_string fragment resource
  typeset -a request=()

  IFS=: read -r scheme _ _ netloc port path query_string _ \
    < <(http.url-parse "$url")

  resource=$path

  [[ $query_string ]] && resource+=?$query_string

  request+=("POST $resource HTTP/1.0")
  request+=("Host: $netloc")
  request+=("Content-Type: application/x-www-form-urlencoded")
  request+=("Content-Length: $((${#form}+2))") # form + \r\n
  request+=('')
  request+=("$form")

  printf '%s\r\n' "${request[@]}" | net.tcp-send "$netloc" "$port"
}
