#!/bin/bash


function ipv4.dot-to-ip {
  : <<EOD
  ipv4.dot-to-ip -- Converts a dotted-decimal IPv4 address
    representation to the 32 bit unsigned integer.
EOD

  typeset dot=$1 ipv4
  typeset -a components

  IFS=. read -ra components <<< "$dot"

  ipv4=0
  ipv4=$((ipv4 | ((components[0] & 0xff) << 24) ))
  ipv4=$((ipv4 | ((components[1] & 0xff) << 16) ))
  ipv4=$((ipv4 | ((components[2] & 0xff) <<  8) ))
  ipv4=$((ipv4 | ((components[3] & 0xff) <<  0) ))

  printf %s "$ipv4"
}


function ipv4.ip-to-dot {
  : <<EOD
  ipv4.ip-to-dot -- Converts a 32 bit unsigned integer to
  dotted-decimal notation.
EOD

  typeset ipv4=$1 octet0 octet1 octet2 octet3

  octet0=$(( (ipv4 >> 24) & 0xff))
  octet1=$(( (ipv4 >> 16) & 0xff))
  octet2=$(( (ipv4 >>  8) & 0xff))
  octet3=$(( (ipv4 >>  0) & 0xff))

  printf '%u.%u.%u.%u' "$octet0" "$octet1" "$octet2" "$octet3"
}


function ipv4.bits-to-mask {
  : <<EOD
  ipv4.bits-to-mask -- Generates a dotted-decimal representation of a
  network mask with N bits enabled. 
EOD

  typeset bits=$1

  ipv4.ip-to-dot "$(( (2**32 - 1) & ~(2**(32 - bits) - 1) ))"
}


function ipv4.mask-to-bits {
  : <<EOD
  ipv4.mask-to-bits -- Computes the number of bits enabled in a
  dotted-decimal representation of a network mask.
EOD

  typeset i mask=$1

  for (( i = 32; i > 0; i-- )); do
    [[ $mask = "$(ipv4.bits-to-mask "$i")" ]] && {
      printf %u "$i"; return
    }
  done
}


function ipv4.mask-address {
  : <<EOD
  ipv4.mask-address -- Masks an IPv4 address represented in
  dotted-decimal with a network mask also represented in
  dotted-decimal.
  
  e.g.:

  $ ipv4.mask-address 10.10.4.10 255.255.255.0
  10.10.4.0
EOD

  typeset dot mask

  dot=$(ipv4.dot-to-ip "$1")
  mask=$(ipv4.dot-to-ip "$2")

  ipv4.ip-to-dot "$((dot & mask))"
}


function ipv4.address-in-network {
  : <<'EOD'
  ipv4.address-in-network --
  
  e.g.:

  $ ipv4.address-in-network 10.10.4.10 10.10.4.0/24; echo $?
  0

  $ ipv4.address-in-network 10.10.5.10 10.10.4.0/24; echo $?
  1
EOD
  typeset dot=$1 network=$2
  typeset base_dot bits masked_address masked_base

  IFS=/ read -r base_dot bits <<< "$network"

  masked_address=$(ipv4.mask-address "$dot" "$(ipv4.bits-to-mask "$bits")")
  masked_base=$(ipv4.mask-address "$base_dot" "$(ipv4.bits-to-mask "$bits")")

  [[ $masked_address = "$masked_base" ]]
}
