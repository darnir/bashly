#!/bin/bash


function ipv4.dot-to-ip {
  : Converts a dotted-decimal IPv4 address representation to the 32 bit
  : number.

  typeset dot=$1 ipv4
  typeset -a components

  IFS=. read -ra components <<< "$dot"

  ipv4=0
  ipv4=$((ipv4 | ((components[0] & 0xff) << 24) ))
  ipv4=$((ipv4 | ((components[1] & 0xff) << 16) ))
  ipv4=$((ipv4 | ((components[2] & 0xff) <<  8) ))
  ipv4=$((ipv4 | ((components[3] & 0xff) <<  0) ))

  printf %s "$ipv4"
}


function ipv4.ip-to-dot {
  : Converts a 32 bit unsigned integer to dotted-decimal notation.

  typeset ipv4=$1 octet0 octet1 octet2 octet3

  octet0=$(( (ipv4 >> 24) & 0xff))
  octet1=$(( (ipv4 >> 16) & 0xff))
  octet2=$(( (ipv4 >>  8) & 0xff))
  octet3=$(( (ipv4 >>  0) & 0xff))

  printf '%u.%u.%u.%u' "$octet0" "$octet1" "$octet2" "$octet3"
}


function ipv4.bits-to-mask {
  : Generates a dotted-decimal representation of a network mask with N
  : bits high.

  typeset bits=$1

  ipv4.ip-to-dot "$(( (2**32 - 1) & ~(2**(32 - bits) - 1) ))"
}


function ipv4.mask-to-bits {
  typeset i mask=$1

  for (( i = 32; i > 0; i-- )); do
    [[ "$mask" = $(ipv4.bits-to-mask "$i") ]] && {
      printf %u "$i"; return
    }
  done
}


function ipv4.mask-address {
  : Masks an IPv4 address represented in dotted-decimal with a network
  : mask also represented in dotted-decimal.
  :
  : dotmask a.b.c.d m.n.o.p

  typeset dot mask

  dot=$(ipv4.dot-to-ip "$1")
  mask=$(ipv4.dot-to-ip "$2")

  ipv4.ip-to-dot "$((dot & mask))"
}
