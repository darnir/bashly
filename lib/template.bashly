#!/bin/bash


function template__p__simple__emit {
  typeset character=$1

  printf '%s' "$character" >&3
}


function template__p__simple__emit_variable {
  typeset variable=$1
  typeset value=${!variable}

  printf '%s' "$value" >&3
}


function template__p__simple__string {
  typeset character=$1 variable=$2

  case $character in
    \$) echo 'dollar'; return;;
    \\) echo 'escape'; return;;
  esac

  template__p__simple__emit "$character"

  echo 'string'
}


function template__p__simple__escape {
  typeset character=$1 variable=$2

  template__p__simple__emit "$character"

  echo 'string'
}


function template__p__simple__dollar {
  typeset character=$1 variable=$2

  if [[ $character = '{' ]]; then
    echo 'left_brace'; return
  elif [[ $character = [[:alnum:]] ]]; then
    echo "variable:$variable$character"; return
  fi

  : invalid variable name character

  echo 'error'
}


function template__p__simple__variable {
  typeset character=$1 variable=$2

  if [[ $character = [[:alnum:]] ]]; then
    echo "variable:$variable$character"; return
  fi

  template__p__simple__emit_variable "$variable"

  template__p__simple__string "$character"
}


function template__p__simple__left_brace {
  typeset character=$1 variable=$2

  if [[ $character = [[:alnum:]] ]]; then
    echo "variable_brace:$variable$character"; return
  fi

  : invalid variable name character
  echo 'error'
}


function template__p__simple__right_brace {
  typeset character=$1 variable=$2

  template__p__simple__string "$character"
}


function template__p__simple__variable_brace {
  typeset character=$1 variable=$2

  if [[ $character = '}' ]]; then
    template__p__simple__emit_variable "$variable"

    echo 'right_brace'; return
  elif [[ $character = [[:alnum:]] ]]; then
    echo "variable_brace:$variable$character"; return
  fi

  : error missing closing right brace
  echo 'error'
}


function template__p__simple__error {
  typeset character=$1 variable=$2

  echo 'error'
}


function template__p__simple__fsm {
  : template__p__simple__fsm

  typeset state=$1 character=$2 variable=$3

  case $state in
    string)
      template__p__simple__string "$character" "$variable";;
    escape)
      template__p__simple__escape "$character" "$variable";;
    dollar)
      template__p__simple__dollar "$character" "$variable";;
    variable)
      template__p__simple__variable "$character" "$variable";;
    left_brace)
      template__p__simple__left_brace "$character" "$variable";;
    right_brace)
      template__p__simple__right_brace "$character" "$variable";;
    variable_brace)
      template__p__simple__variable_brace "$character" "$variable";;
    error)
      template__p__simple__error; return 1;;
  esac

  return 0
}


function template__simple {
  typeset i line character variable state=string

  {
    while IFS= read -r line; do
      for ((i = 0; i < ${#line}; i++)); do
        character=${line:i:1}

        IFS=: read -r state variable < \
          <(template__p__simple__fsm "$state" "$character" \
            "$variable")
      done

      IFS=: read -r state variable < \
        <(template__p__simple__fsm "$state" $'\n' "$variable")
    done

    for ((i = 0; i < ${#line}; i++)); do
      character=${line:i:1}

      IFS=: read -r state variable < \
        <(template__p__simple__fsm "$state" "$character" "$variable")
    done

    IFS=: read -r state variable < \
      <(template__p__simple__fsm "$state" '' "$variable")
    
    [[ $state = 'error' ]] && return 1
  } 3>&1

  return 0
}
